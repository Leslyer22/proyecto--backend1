<h1>Productos en Tiempo Real</h1>

<ul id="productList">
  {{#each products}}
    <li>
      {{this.title}} - ${{this.price}} 
      <button class="deleteBtn" data-id="{{this._id}}">Eliminar</button>
    </li>
  {{/each}}
</ul>

<h2>Agregar Producto</h2>
<form id="addProductForm">
  <input type="text" name="title" placeholder="Título" required />
  <input type="number" name="price" placeholder="Precio" required />
  <button type="submit">Agregar Producto</button>
</form>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();

  const productList = document.getElementById("productList");
  const form = document.getElementById("addProductForm");

  // Enviar nuevo producto al servidor via socket
  form.addEventListener("submit", (e) => {
    e.preventDefault();
    const newProduct = {
      title: form.title.value,
      price: parseFloat(form.price.value),
    };
    socket.emit("addProduct", newProduct);
    form.reset();
  });

  // Escuchar lista actualizada y renderizar
  socket.on("updateProducts", (products) => {
    productList.innerHTML = "";
    products.forEach(p => {
      const li = document.createElement("li");
      li.textContent = `${p.title} - $${p.price} `;

      const btnDelete = document.createElement("button");
      btnDelete.textContent = "Eliminar";
      btnDelete.classList.add("deleteBtn");
      btnDelete.dataset.id = p._id;

      btnDelete.addEventListener("click", () => {
        socket.emit("deleteProduct", p._id);
      });

      li.appendChild(btnDelete);
      productList.appendChild(li);
    });
  });

  // Manejar clicks eliminar producto (para botones iniciales también)
  productList.addEventListener("click", (e) => {
    if(e.target.classList.contains("deleteBtn")){
      const id = e.target.dataset.id;
      socket.emit("deleteProduct", id);
    }
  });
</script>
